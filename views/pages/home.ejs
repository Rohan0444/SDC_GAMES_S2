<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SDC Games - Among Us</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=Orbitron:wght@400;700;900&family=Rajdhani:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', sans-serif;
      background: #000;
      color: #fff;
      overflow-x: hidden;
    }

    /* Alice in Borderland Header */
    .header {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      z-index: 1000;
      background: linear-gradient(180deg, rgba(0,0,0,0.9) 0%, rgba(0,0,0,0.7) 50%, transparent 100%);
      padding: 25px 60px;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      border-bottom: 1px solid rgba(229, 9, 20, 0.2);
      backdrop-filter: blur(15px);
    }

    .header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(90deg, 
        rgba(229, 9, 20, 0.05) 0%, 
        transparent 20%, 
        transparent 80%, 
        rgba(0, 255, 136, 0.05) 100%
      );
      pointer-events: none;
    }

    .header.scrolled {
      background: rgba(0,0,0,0.98);
      backdrop-filter: blur(20px);
      border-bottom: 1px solid rgba(229, 9, 20, 0.4);
      box-shadow: 0 4px 30px rgba(229, 9, 20, 0.1);
    }

    .nav {
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: relative;
    }

    .logo {
      font-family: 'Orbitron', monospace;
      font-size: 36px;
      font-weight: 900;
      color: #fff;
      text-decoration: none;
      letter-spacing: 2px;
      transition: color 0.3s ease;
    }

    .logo:hover {
      color: #e50914;
    }

    .nav-menu {
      display: flex;
      list-style: none;
      gap: 40px;
    }

    .nav-menu a {
      color: #fff;
      text-decoration: none;
      font-family: 'Rajdhani', sans-serif;
      font-weight: 600;
      font-size: 18px;
      letter-spacing: 1px;
      position: relative;
      transition: color 0.3s ease;
      text-transform: uppercase;
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 8px 16px;
    }

    .nav-menu a::before {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      width: 0;
      height: 2px;
      background: linear-gradient(90deg, #e50914, #00ff88);
      transition: all 0.3s ease;
      border-radius: 1px;
    }

    .nav-menu a:hover {
      color: #e50914;
    }

    .nav-menu a:hover::before {
      width: 100%;
    }

    .nav-icon {
      font-size: 16px;
      transition: color 0.3s ease;
    }

    .nav-menu a:hover .nav-icon {
      color: #e50914;
    }

    .nav-buttons {
      display: flex;
      gap: 20px;
      align-items: center;
    }

    .btn-secondary {
      background: transparent;
      border: 2px solid #e50914;
      color: #fff;
      padding: 12px 24px;
      border-radius: 8px;
      text-decoration: none;
      font-family: 'Rajdhani', sans-serif;
      font-weight: 600;
      font-size: 16px;
      letter-spacing: 1px;
      text-transform: uppercase;
      position: relative;
      overflow: hidden;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .btn-secondary::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(229, 9, 20, 0.3), transparent);
      transition: all 0.6s ease;
    }

    .btn-secondary:hover {
      background: rgba(229, 9, 20, 0.1);
      border-color: #00ff88;
      color: #00ff88;
      text-shadow: 0 0 10px rgba(0, 255, 136, 0.8);
      transform: translateY(-2px);
      box-shadow: 0 8px 25px rgba(229, 9, 20, 0.3);
    }

    .btn-secondary:hover::before {
      left: 100%;
    }

    .btn-primary {
      background: linear-gradient(45deg, #e50914, #ff1744);
      border: none;
      color: #fff;
      padding: 12px 24px;
      border-radius: 8px;
      text-decoration: none;
      font-family: 'Rajdhani', sans-serif;
      font-weight: 700;
      font-size: 16px;
      letter-spacing: 1px;
      text-transform: uppercase;
      position: relative;
      overflow: hidden;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: 0 4px 15px rgba(229, 9, 20, 0.3);
    }

    .btn-primary::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: all 0.6s ease;
    }

    .btn-primary:hover {
      background: linear-gradient(45deg, #ff1744, #e50914);
      transform: translateY(-3px);
      box-shadow: 0 12px 30px rgba(229, 9, 20, 0.5);
      text-shadow: 0 0 15px rgba(255, 255, 255, 0.8);
    }

    .btn-primary:hover::before {
      left: 100%;
    }

    .btn-primary:active {
      transform: translateY(-1px);
      box-shadow: 0 6px 20px rgba(229, 9, 20, 0.4);
    }

    /* Hero Section */
    .hero {
      position: relative;
      height: 100vh;
      background: linear-gradient(45deg, #000 0%, #1a1a1a 50%, #000 100%);
      display: flex;
      align-items: center;
      overflow: hidden;
    }

    .hero::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: url('/images/alice-borderland-hero.jpg') center/cover;
      opacity: 0.3;
      z-index: 1;
    }

    .hero::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(
        90deg, 
        rgba(0,0,0,0.8) 0%, 
        rgba(0,0,0,0.4) 30%, 
        rgba(0,0,0,0.1) 60%, 
        transparent 100%
      );
      z-index: 2;
    }

    .hero-content {
      position: relative;
      z-index: 3;
      max-width: 600px;
      margin-left: 60px;
      padding: 0 20px;
      flex: 1;
      animation: contentSlideIn 2s ease-out;
    }

    @keyframes contentSlideIn {
      0% {
        transform: translateX(-100px);
        opacity: 0;
      }
      100% {
        transform: translateX(0);
        opacity: 1;
      }
    }

    .hero-character {
      position: absolute;
      right: 5%;
      top: 50%;
      transform: translateY(-50%);
      z-index: 3;
      width: 40%;
      max-width: 450px;
      height: 70vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .hero-character img {
      width: 100%;
      height: 100%;
      object-fit: contain;
      object-position: center;
      filter: drop-shadow(0 0 30px rgba(229, 9, 20, 0.5));
      animation: characterEntrance 4s ease-out forwards, characterFloat 6s ease-in-out infinite 4s;
      transform: scale(0) rotate(720deg);
      opacity: 0;
    }

    @keyframes characterEntrance {
      0% {
        transform: scale(0) rotate(720deg);
        opacity: 0;
      }
      50% {
        transform: scale(1.2) rotate(360deg);
        opacity: 0.8;
      }
      100% {
        transform: scale(1) rotate(0deg);
        opacity: 1;
      }
    }

    @keyframes characterFloat {
      0%, 100% { transform: scale(1) translateY(0px) rotate(0deg); }
      25% { transform: scale(1.05) translateY(-15px) rotate(2deg); }
      50% { transform: scale(1.1) translateY(-20px) rotate(0deg); }
      75% { transform: scale(1.05) translateY(-15px) rotate(-2deg); }
    }

    .hero-badge {
      display: inline-block;
      background: rgba(255,255,255,0.1);
      padding: 4px 12px;
      border-radius: 4px;
      font-size: 14px;
      font-weight: 600;
      margin-bottom: 20px;
      backdrop-filter: blur(10px);
    }

    .hero-title {
      font-size: 64px;
      font-weight: 900;
      line-height: 1.1;
      margin-bottom: 20px;
      background: linear-gradient(45deg, #fff, #e50914);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .hero-subtitle {
      font-size: 24px;
      font-weight: 600;
      margin-bottom: 20px;
      color: #e50914;
    }

    .hero-description {
      font-size: 18px;
      line-height: 1.6;
      margin-bottom: 30px;
      color: #ccc;
      max-width: 500px;
    }

    .hero-buttons {
      display: flex;
      gap: 20px;
      margin-bottom: 40px;
    }

    .btn-play {
      background: #fff;
      color: #000;
      padding: 12px 24px;
      border-radius: 4px;
      text-decoration: none;
      font-weight: 600;
      font-size: 16px;
      display: flex;
      align-items: center;
      gap: 8px;
      transition: all 0.3s ease;
    }

    .btn-play:hover {
      background: #e6e6e6;
    }

    .btn-info {
      background: rgba(109,109,110,0.7);
      color: #fff;
      padding: 12px 24px;
      border-radius: 4px;
      text-decoration: none;
      font-weight: 600;
      font-size: 16px;
      display: flex;
      align-items: center;
      gap: 8px;
      transition: all 0.3s ease;
    }

    .btn-info:hover {
      background: rgba(109,109,110,0.9);
    }

    .hero-meta {
      display: flex;
      gap: 20px;
      font-size: 14px;
      color: #ccc;
    }

    .rating {
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .star {
      color: #ffd700;
    }

    /* Cards Section */
    .cards-section {
      padding: 60px;
      background: #000;
    }

    .section-title {
      font-size: 24px;
      font-weight: 700;
      margin-bottom: 30px;
      color: #fff;
    }

    .cards-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 20px;
    }

    .card {
      position: relative;
      border-radius: 8px;
      overflow: hidden;
      transition: transform 0.3s ease;
      cursor: pointer;
    }

    .card:hover {
      transform: scale(1.05);
    }

    .card img {
      width: 100%;
      height: 300px;
      object-fit: cover;
    }

    .card-overlay {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      background: linear-gradient(transparent, rgba(0,0,0,0.8));
      padding: 20px;
      color: #fff;
    }

    .card-title {
      font-size: 16px;
      font-weight: 600;
      margin-bottom: 5px;
    }

    .card-description {
      font-size: 14px;
      color: #ccc;
    }

    /* Playing Cards Section */
    .playing-cards {
      padding: 60px;
      background: linear-gradient(135deg, #1a1a1a 0%, #000 100%);
      text-align: center;
    }

    .playing-cards h2 {
      font-size: 48px;
      font-weight: 900;
      margin-bottom: 20px;
      background: linear-gradient(45deg, #e50914, #ff6b6b);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    .playing-cards p {
      font-size: 18px;
      color: #ccc;
      margin-bottom: 40px;
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
    }

    .cards-container {
      display: flex;
      justify-content: center;
      gap: 30px;
      flex-wrap: wrap;
    }

    .playing-card {
      width: 200px;
      height: 280px;
      background: #000;
      border-radius: 12px;
      border: 2px solid #e50914;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      position: relative;
      overflow: hidden;
      transition: all 0.3s ease;
    }

    .playing-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 20px 40px rgba(229, 9, 20, 0.3);
    }

    .card-suit {
      font-size: 48px;
      color: #e50914;
      margin-bottom: 10px;
    }

    .card-value {
      font-size: 24px;
      font-weight: 700;
      color: #fff;
    }

    .card-character {
      position: absolute;
      bottom: 10px;
      font-size: 12px;
      color: #ccc;
      text-align: center;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .header {
        padding: 20px 25px;
        background: linear-gradient(180deg, rgba(0,0,0,0.95) 0%, rgba(0,0,0,0.8) 50%, transparent 100%);
      }

      .logo {
        font-size: 28px;
        letter-spacing: 1px;
      }

      .nav-menu {
        display: none;
      }

      .nav-buttons {
        gap: 15px;
      }

      .btn-secondary, .btn-primary {
        padding: 10px 18px;
        font-size: 14px;
      }

      .hero-content {
        margin-left: 20px;
        text-align: center;
        max-width: 100%;
      }

      .hero-character {
      position: relative;
        width: 100%;
        height: 250px;
      margin-top: 30px;
        order: 2;
      }

      .hero-character img {
        animation: characterEntranceMobile 3s ease-out forwards, characterFloatMobile 4s ease-in-out infinite 3s;
      }

      @keyframes characterEntranceMobile {
        0% {
          transform: scale(0) rotate(360deg);
        opacity: 0;
        }
        100% {
          transform: scale(1) rotate(0deg);
          opacity: 1;
        }
      }

      @keyframes characterFloatMobile {
        0%, 100% { transform: scale(1) translateY(0px); }
        50% { transform: scale(1.05) translateY(-10px); }
      }

      .hero {
        flex-direction: column;
        justify-content: center;
        padding: 20px;
      }

      .hero-title {
        font-size: 48px;
      }

      .hero-subtitle {
        font-size: 20px;
      }

      .hero-description {
        font-size: 16px;
      }

      .cards-section,
      .playing-cards {
        padding: 40px 20px;
      }

      .cards-container {
        gap: 20px;
      }

      .playing-card {
        width: 150px;
        height: 210px;
      }
    }

    /* Glitch Effect for Title */
    .glitch {
      position: relative;
      animation: glitch 2s infinite;
    }

    @keyframes glitch {
      0%, 100% { transform: translate(0); }
      20% { transform: translate(-2px, 2px); }
      40% { transform: translate(-2px, -2px); }
      60% { transform: translate(2px, 2px); }
      80% { transform: translate(2px, -2px); }
    }

    .glitch::before,
    .glitch::after {
      content: attr(data-text);
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }

    .glitch::before {
      animation: glitch-1 0.5s infinite;
      color: #e50914;
      z-index: -1;
    }

    .glitch::after {
      animation: glitch-2 0.5s infinite;
      color: #00ff88;
      z-index: -2;
    }

    @keyframes glitch-1 {
      0%, 100% { transform: translate(0); }
      20% { transform: translate(2px, -2px); }
      40% { transform: translate(-2px, 2px); }
      60% { transform: translate(-2px, -2px); }
      80% { transform: translate(2px, 2px); }
    }

     @keyframes glitch-2 {
       0%, 100% { transform: translate(0); }
       20% { transform: translate(-2px, 2px); }
       40% { transform: translate(2px, -2px); }
       60% { transform: translate(2px, 2px); }
       80% { transform: translate(-2px, -2px); }
     }

     /* Mouse Flare Effects */
     .mouse-flare {
       position: fixed;
       width: 60px;
       height: 60px;
       background: radial-gradient(circle, rgba(229, 9, 20, 0.9) 0%, rgba(229, 9, 20, 0.6) 30%, rgba(229, 9, 20, 0.3) 60%, transparent 100%);
       border-radius: 50%;
       pointer-events: none;
       z-index: 9999;
       mix-blend-mode: screen;
       transition: all 0.1s ease-out;
       transform: translate(-50%, -50%);
       box-shadow: 0 0 20px rgba(229, 9, 20, 0.5), 0 0 40px rgba(229, 9, 20, 0.3);
     }

     .mouse-flare.active {
       animation: flarePulse 2s ease-in-out infinite;
     }

     @keyframes flarePulse {
       0%, 100% { 
         transform: translate(-50%, -50%) scale(1);
         opacity: 0.8;
       }
       50% { 
         transform: translate(-50%, -50%) scale(1.2);
         opacity: 1;
       }
     }

     /* Shooting Effect */
     .shoot-effect {
       position: fixed;
       width: 4px;
       height: 4px;
       background: #e50914;
       border-radius: 50%;
       pointer-events: none;
       z-index: 9998;
       box-shadow: 0 0 10px #e50914, 0 0 20px #e50914, 0 0 30px #e50914;
       animation: shootTrail 0.3s ease-out forwards;
     }

     @keyframes shootTrail {
       0% { 
         transform: scale(0);
         opacity: 1;
       }
       50% { 
         transform: scale(1.5);
         opacity: 0.8;
       }
       100% { 
         transform: scale(2);
         opacity: 0;
       }
     }

     /* Button Press Effect */
     .btn-press-effect {
       position: relative;
      overflow: hidden;
    }

     .btn-press-effect::before {
       content: '';
       position: absolute;
       top: 50%;
       left: 50%;
       width: 0;
       height: 0;
       background: radial-gradient(circle, rgba(229, 9, 20, 0.6) 0%, transparent 70%);
       border-radius: 50%;
       transform: translate(-50%, -50%);
       transition: all 0.3s ease;
     }

     .btn-press-effect:active::before {
       width: 300px;
       height: 300px;
       animation: buttonExplosion 0.4s ease-out;
     }

     @keyframes buttonExplosion {
       0% { 
         transform: translate(-50%, -50%) scale(0);
         opacity: 1;
       }
       100% { 
         transform: translate(-50%, -50%) scale(1);
        opacity: 0;
       }
     }

     /* Enhanced Button Styles */
     .btn-play, .btn-info, .btn-primary, .btn-secondary {
       position: relative;
       overflow: hidden;
       transition: all 0.3s ease;
     }

     .btn-play:active, .btn-info:active, .btn-primary:active, .btn-secondary:active {
       transform: scale(0.95);
     }

     /* Screen Flash Effect */
     .screen-flash {
       position: fixed;
       top: 0;
       left: 0;
       width: 100%;
       height: 100%;
       background: rgba(229, 9, 20, 0.3);
       pointer-events: none;
       z-index: 10000;
       animation: screenFlash 0.2s ease-out;
     }

     @keyframes screenFlash {
       0% { opacity: 0; }
       50% { opacity: 1; }
       100% { opacity: 0; }
     }

     /* Alice in Borderland Header Effects */
     .header-card-effect {
       position: absolute;
       top: 50%;
       right: 20px;
       transform: translateY(-50%);
       width: 40px;
       height: 60px;
       background: linear-gradient(45deg, #e50914, #00ff88);
       border-radius: 6px;
       opacity: 0;
       transition: all 0.4s ease;
       z-index: -1;
     }

     .header:hover .header-card-effect {
       opacity: 0.1;
       animation: cardFloat 2s ease-in-out infinite;
     }

     @keyframes cardFloat {
       0%, 100% { transform: translateY(-50%) rotate(0deg); }
       25% { transform: translateY(-60%) rotate(2deg); }
       50% { transform: translateY(-55%) rotate(0deg); }
       75% { transform: translateY(-60%) rotate(-2deg); }
     }

     /* Neon Pulse Effect */
     .neon-pulse {
       animation: neonPulse 4s ease-in-out infinite;
     }

     @keyframes neonPulse {
       0%, 100% { 
         text-shadow: 0 0 15px rgba(229, 9, 20, 0.6);
       }
       50% { 
         text-shadow: 0 0 20px rgba(229, 9, 20, 0.8), 0 0 30px rgba(229, 9, 20, 0.4);
       }
     }

     /* Alice in Borderland Navigation Icons */
     .nav-icon {
       font-size: 18px;
       transition: all 0.3s ease;
       filter: drop-shadow(0 0 4px rgba(255, 255, 255, 0.3));
     }

     .nav-menu a:hover .nav-icon {
       transform: scale(1.2) rotate(5deg);
       filter: drop-shadow(0 0 12px rgba(229, 9, 20, 0.8));
     }

     /* Card Suit Icons */
     .icon-hearts::before { content: "♥"; }
     .icon-spades::before { content: "♠"; }
     .icon-clubs::before { content: "♣"; }
     .icon-diamonds::before { content: "♦"; }
     .icon-game::before { content: "🎮"; }
     .icon-players::before { content: "👥"; }
     .icon-host::before { content: "🎯"; }

     /* Flicker Effect */
     .flicker-effect {
       position: fixed;
       width: 100px;
       height: 100px;
       background: radial-gradient(circle, rgba(229, 9, 20, 0.9) 0%, rgba(229, 9, 20, 0.6) 30%, rgba(229, 9, 20, 0.3) 60%, transparent 100%);
       border-radius: 50%;
       pointer-events: none;
       z-index: 9997;
       mix-blend-mode: screen;
       transform: translate(-50%, -50%);
       box-shadow: 0 0 30px rgba(229, 9, 20, 0.8), 0 0 60px rgba(229, 9, 20, 0.6);
       animation: flickerAnimation 0.6s ease-out;
     }

     @keyframes flickerAnimation {
       0% { 
         transform: translate(-50%, -50%) scale(0);
         opacity: 0;
       }
       20% { 
         transform: translate(-50%, -50%) scale(1.5);
         opacity: 1;
       }
       40% { 
         transform: translate(-50%, -50%) scale(0.8);
         opacity: 0.7;
       }
       60% { 
         transform: translate(-50%, -50%) scale(1.2);
         opacity: 0.9;
       }
       80% { 
         transform: translate(-50%, -50%) scale(0.9);
         opacity: 0.6;
       }
       100% { 
         transform: translate(-50%, -50%) scale(1);
         opacity: 0;
       }
    }

     /* Red Gunshot Effect */
     .gunshot-effect {
       position: fixed;
       top: 0;
       left: 0;
       width: 100%;
       height: 100%;
       pointer-events: none;
       z-index: 10001;
       background: radial-gradient(circle at 30% 40%, rgba(229, 9, 20, 0.9) 0%, rgba(229, 9, 20, 0.6) 20%, rgba(139, 0, 0, 0.3) 40%, transparent 60%);
       animation: gunshotFlash 0.6s ease-out;
     }

     @keyframes gunshotFlash {
       0% { 
         opacity: 0;
         transform: scale(0.3);
       }
       15% { 
         opacity: 1;
         transform: scale(1);
       }
       30% { 
         opacity: 0.8;
         transform: scale(1.2);
       }
       100% { 
         opacity: 0;
         transform: scale(1.5);
       }
     }


     /* Realistic Blood Drip Effects */
     .blood-drip {
       position: fixed;
       pointer-events: none;
       z-index: 10000;
       opacity: 0;
       background: 
         radial-gradient(ellipse 80% 60% at 50% 30%, #DC143C 0%, #B22222 40%, #8B0000 100%);
       border-radius: 50% 50% 50% 50% / 70% 70% 30% 30%;
       animation: bloodDripFlow 4s ease-in forwards;
       filter: drop-shadow(0 4px 8px rgba(139, 0, 0, 0.6)) blur(0.5px);
       box-shadow: 
         inset 0 2px 4px rgba(255, 255, 255, 0.1),
         0 0 10px rgba(220, 20, 60, 0.3);
     }

     .blood-drip-1 {
       width: 25px;
       height: 35px;
       top: 10%;
       left: 35%;
       animation-delay: 0.3s;
     }

     .blood-drip-2 {
       width: 35px;
       height: 45px;
       top: 15%;
       left: 50%;
       animation-delay: 0.5s;
     }

     .blood-drip-3 {
       width: 20px;
       height: 30px;
       top: 8%;
       left: 65%;
       animation-delay: 0.7s;
     }

     .blood-drip-4 {
       width: 30px;
       height: 40px;
       top: 12%;
       left: 25%;
       animation-delay: 1.0s;
     }

     .blood-drip-5 {
       width: 40px;
       height: 50px;
       top: 18%;
       left: 75%;
       animation-delay: 1.3s;
     }

     .blood-drip-6 {
       width: 28px;
       height: 38px;
       top: 14%;
       left: 45%;
       animation-delay: 1.6s;
     }

     .blood-drip-7 {
       width: 22px;
       height: 32px;
       top: 11%;
       left: 55%;
       animation-delay: 1.9s;
     }

     @keyframes bloodDripFlow {
       0% { 
         opacity: 0; 
         transform: translateY(0) scale(0.3); 
         height: 25px;
       }
       3% { 
         opacity: 0.8; 
         transform: translateY(0) scale(0.8); 
         height: 30px;
       }
       8% { 
         opacity: 1; 
         transform: translateY(0) scale(1); 
         height: 35px;
       }
       15% { 
         opacity: 1; 
         transform: translateY(10vh) scale(1.1); 
         height: 40px;
       }
       25% { 
         opacity: 0.95; 
         transform: translateY(25vh) scale(1); 
         height: 45px;
       }
       40% { 
         opacity: 0.9; 
         transform: translateY(50vh) scale(0.95); 
         height: 50px;
       }
       60% { 
         opacity: 0.8; 
         transform: translateY(70vh) scale(0.9); 
         height: 55px;
       }
       80% { 
         opacity: 0.6; 
         transform: translateY(85vh) scale(0.8); 
         height: 60px;
       }
       95% { 
         opacity: 0.3; 
         transform: translateY(95vh) scale(0.6); 
         height: 45px;
       }
       100% { 
         opacity: 0; 
         transform: translateY(100vh) scale(0.3); 
         height: 0px;
       }
     }

     /* Blood Trail Effects */
     .blood-trail {
       position: fixed;
       pointer-events: none;
       z-index: 10000;
       opacity: 0;
       background: linear-gradient(to bottom, #DC143C 0%, #8B0000 100%);
       border-radius: 2px;
       animation: bloodTrailFlow 6s ease-in forwards;
     }

     .blood-trail-1 {
       width: 3px;
       height: 0;
       top: 15%;
       left: 42%;
       animation-delay: 1s;
     }

     .blood-trail-2 {
       width: 4px;
       height: 0;
       top: 20%;
       left: 52%;
       animation-delay: 1.5s;
     }

     .blood-trail-3 {
       width: 2px;
       height: 0;
       top: 12%;
       left: 62%;
       animation-delay: 2.2s;
     }

     @keyframes bloodTrailFlow {
       0% { 
         opacity: 0; 
         height: 0; 
         transform: translateY(0); 
       }
       10% { 
         opacity: 0.8; 
         height: 30px; 
         transform: translateY(0); 
       }
       30% { 
         opacity: 0.6; 
         height: 60px; 
         transform: translateY(30vh); 
       }
       60% { 
         opacity: 0.4; 
         height: 90px; 
         transform: translateY(60vh); 
       }
       90% { 
         opacity: 0.2; 
         height: 120px; 
         transform: translateY(80vh); 
       }
       100% { 
         opacity: 0; 
         height: 0; 
         transform: translateY(100vh); 
       }
     }

     /* Screen Shake Effect */
     .screen-shake {
       animation: screenShake 0.5s ease-out;
     }

     @keyframes screenShake {
       0%, 100% { transform: translateX(0); }
       10% { transform: translateX(-5px) translateY(-2px); }
       20% { transform: translateX(5px) translateY(2px); }
       30% { transform: translateX(-3px) translateY(-1px); }
       40% { transform: translateX(3px) translateY(1px); }
       50% { transform: translateX(-2px) translateY(-1px); }
       60% { transform: translateX(2px) translateY(1px); }
       70% { transform: translateX(-1px); }
       80% { transform: translateX(1px); }
       90% { transform: translateX(-1px); }
     }
  </style>
</head>
<body>
  <!-- Header -->
  <header class="header" id="header">
    <div class="header-card-effect"></div>
    <nav class="nav">
      <a href="/" class="logo">SDC GAMES</a>
      <ul class="nav-menu">
        <li><a href="/lets-begin"><span class="nav-icon icon-hearts"></span>Let's Begin</a></li>
        <li><a href="/participants"><span class="nav-icon icon-players"></span>Participants</a></li>
        <li><a href="/game-hosts"><span class="nav-icon icon-host"></span>Game Hosts</a></li>
      </ul>
    </nav>
  </header>

  <!-- Hero Section -->
  <section class="hero">
    <div class="hero-content">
      <div class="hero-badge">SPACE GAME</div>
      <h1 class="hero-title glitch" data-text="AMONG US">Technozion'25</h1>
      <h2 class="hero-subtitle">SDC GAMES</h2>
      <p class="hero-description">
        A game where every skill matters — from talent to sheer luck. Allies may deceive you. Nothing is guaranteed, and every truth could be a lie.
      </p>
       <div class="hero-buttons">
         <a href="/lets-begin" class="btn-play btn-press-effect">
           <span>▶</span> Play Now
         </a>
         <a href="/participants" class="btn-info btn-press-effect">
           <span>ⓘ</span> Participants
         </a>
       </div>
    </div>
    <div class="hero-character">
      <img src="/images/IMG_8032.WEBP" alt="Avatar Character" style="width: 120%; height: 120%; object-fit: contain; transform: scale(1.2);">
  </div>
  </section>

  <!-- Cards Section -->
  <section class="cards-section">
    <h2 class="section-title">Crewmates</h2>
    <div class="cards-grid">
      <div class="card">
        <img src="/images/IMG_8025.WEBP" alt="Avatar 1" style="width: 100%; height: 300px; object-fit: cover;">
        <div class="card-overlay">
          <div class="card-title">Avatar 1</div>
          <div class="card-description">Suspicious Behavior</div>
        </div>
      </div>
      <div class="card">
        <img src="/images/IMG_8026.WEBP" alt="Avatar 2" style="width: 100%; height: 300px; object-fit: cover;">
        <div class="card-overlay">
          <div class="card-title">Avatar 2</div>
          <div class="card-description">Task Master</div>
        </div>
      </div>
      <div class="card">
        <img src="/images/IMG_8027.WEBP" alt="Avatar 3" style="width: 100%; height: 300px; object-fit: cover;">
        <div class="card-overlay">
          <div class="card-title">Avatar 3</div>
          <div class="card-description">Team Player</div>
        </div>
    </div>
      <div class="card">
        <img src="/images/IMG_8028.WEBP" alt="Avatar 4" style="width: 100%; height: 300px; object-fit: cover;">
        <div class="card-overlay">
          <div class="card-title">Avatar 4</div>
          <div class="card-description">Sabotage Expert</div>
        </div>
      </div>
    </div>
  </section>

  <!-- Emergency Button -->
  <button class="emergency-button" onclick="triggerEmergency()">🚨</button>

  <script>
     // Mouse flare effects
     let mouseFlare = null;
     let mouseStillTimeout;

     // Create persistent mouse flare
     function createPersistentFlare() {
       if (!mouseFlare) {
         mouseFlare = document.createElement('div');
         mouseFlare.className = 'mouse-flare';
         mouseFlare.style.left = '50%';
         mouseFlare.style.top = '50%';
         mouseFlare.style.opacity = '0';
         document.body.appendChild(mouseFlare);
       }
       return mouseFlare;
     }

     // Initialize flare on page load
     document.addEventListener('DOMContentLoaded', () => {
       createPersistentFlare();
       
       // Trigger gunshot effect on page load
       setTimeout(() => {
         createGunshotEffect();
       }, 500); // Delay to let page load first
     });

     // Gunshot effect functions
     function createGunshotEffect() {
       // Play gunshot sound
       playGunshotSound();
       
       // Create red gunshot flash
       const gunshotFlash = document.createElement('div');
       gunshotFlash.className = 'gunshot-effect';
       document.body.appendChild(gunshotFlash);
       
       // Add screen shake to body
       document.body.classList.add('screen-shake');
       
       // Clean up gunshot flash and screen shake
       setTimeout(() => {
         gunshotFlash.remove();
         document.body.classList.remove('screen-shake');
       }, 600); // Gunshot flash animation is 0.6s, screen shake is 0.5s

       // Create blood drips
       const drips = [];
       for (let i = 1; i <= 7; i++) {
         const bloodDrip = document.createElement('div');
         bloodDrip.className = `blood-drip blood-drip-${i}`;
         document.body.appendChild(bloodDrip);
         drips.push(bloodDrip);
       }
       
       // Clean up blood drips after their animation (considering delays)
       // Max drip animation duration is 4s + max delay (1.9s) = 5.9s
       setTimeout(() => {
         drips.forEach(d => d.remove());
       }, 5900);

       // Create blood trails
       const trails = [];
       for (let i = 1; i <= 3; i++) {
         const bloodTrail = document.createElement('div');
         bloodTrail.className = `blood-trail blood-trail-${i}`;
         document.body.appendChild(bloodTrail);
         trails.push(bloodTrail);
       }
       
       // Clean up blood trails after their animation (considering delays)
       // Max trail animation duration is 6s + max delay (2.2s) = 8.2s
       setTimeout(() => {
         trails.forEach(t => t.remove());
       }, 8200);
     }

     // Gunshot sound effect
     function playGunshotSound() {
       // Create audio context for realistic gunshot sound
       const audioContext = new (window.AudioContext || window.webkitAudioContext)();
       
       // Create white noise for gunshot
       const bufferSize = audioContext.sampleRate * 0.1; // 0.1 seconds
       const buffer = audioContext.createBuffer(1, bufferSize, audioContext.sampleRate);
       const output = buffer.getChannelData(0);
       
       // Generate white noise
       for (let i = 0; i < bufferSize; i++) {
         output[i] = Math.random() * 2 - 1;
       }
       
       // Create noise source
       const whiteNoise = audioContext.createBufferSource();
       whiteNoise.buffer = buffer;
       
       // Create gain node for volume control
       const gainNode = audioContext.createGain();
       gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
       gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
       
       // Create filter for gunshot characteristics
       const filter = audioContext.createBiquadFilter();
       filter.type = 'highpass';
       filter.frequency.setValueAtTime(100, audioContext.currentTime);
       filter.frequency.exponentialRampToValueAtTime(50, audioContext.currentTime + 0.1);
       
       // Connect audio nodes
       whiteNoise.connect(filter);
       filter.connect(gainNode);
       gainNode.connect(audioContext.destination);
       
       // Play the sound
       whiteNoise.start(audioContext.currentTime);
       
       // Clean up
       whiteNoise.onended = () => {
         audioContext.close();
       };
     }

     // Smooth mouse movement tracking
     document.addEventListener('mousemove', (e) => {
       if (!mouseFlare) {
         createPersistentFlare();
       }
       
       // Update flare position smoothly
       mouseFlare.style.left = e.clientX + 'px';
       mouseFlare.style.top = e.clientY + 'px';
       mouseFlare.style.opacity = '1';
       mouseFlare.classList.add('active');
       
       // Clear any existing timeout
       clearTimeout(mouseStillTimeout);
       
       // Set timeout for when mouse stops moving
       mouseStillTimeout = setTimeout(() => {
         if (mouseFlare) {
           mouseFlare.classList.remove('active');
           // Keep flare visible but stop pulsing animation
         }
       }, 1000);
     });

     // Hide flare when mouse leaves window
     document.addEventListener('mouseleave', () => {
       if (mouseFlare) {
         mouseFlare.style.opacity = '0';
         mouseFlare.classList.remove('active');
       }
     });

     // Show flare when mouse enters window
     document.addEventListener('mouseenter', () => {
       if (mouseFlare) {
         mouseFlare.style.opacity = '1';
         mouseFlare.classList.add('active');
       }
     });

     // Global click effects - anywhere on screen
     document.addEventListener('click', (e) => {
       // Create shooting effect at click location
       createShootEffect(e.clientX, e.clientY);
       
       // Create screen flash
       createScreenFlash();
       
       // Create additional flickering effect
       createFlickerEffect(e.clientX, e.clientY);
     });

     // Button press effects
     document.querySelectorAll('.btn-press-effect').forEach(button => {
       button.addEventListener('mousedown', (e) => {
         // Create shooting effect
         createShootEffect(e.clientX, e.clientY);
         
         // Create screen flash
         createScreenFlash();
         
         // Add button explosion effect
         button.classList.add('btn-press-effect');
       });

       button.addEventListener('mouseup', () => {
         setTimeout(() => {
           button.classList.remove('btn-press-effect');
         }, 400);
       });
     });

     function createShootEffect(x, y) {
       const shoot = document.createElement('div');
       shoot.className = 'shoot-effect';
       shoot.style.left = x - 2 + 'px';
       shoot.style.top = y - 2 + 'px';
       
       document.body.appendChild(shoot);
       
       setTimeout(() => {
         shoot.remove();
       }, 300);
     }

     function createScreenFlash() {
       const flash = document.createElement('div');
       flash.className = 'screen-flash';
       
       document.body.appendChild(flash);
       
       setTimeout(() => {
         flash.remove();
       }, 200);
     }

     function createFlickerEffect(x, y) {
       const flicker = document.createElement('div');
       flicker.className = 'flicker-effect';
       flicker.style.left = x + 'px';
       flicker.style.top = y + 'px';
       
       document.body.appendChild(flicker);
       
       setTimeout(() => {
         flicker.remove();
       }, 600);
     }

     // Header scroll effect
     window.addEventListener('scroll', () => {
       const header = document.getElementById('header');
       if (window.scrollY > 100) {
         header.classList.add('scrolled');
       } else {
         header.classList.remove('scrolled');
       }
     });

     // Smooth scrolling for navigation links
     document.querySelectorAll('a[href^="#"]').forEach(anchor => {
       anchor.addEventListener('click', function (e) {
         e.preventDefault();
         const target = document.querySelector(this.getAttribute('href'));
         if (target) {
           target.scrollIntoView({
             behavior: 'smooth',
             block: 'start'
           });
         }
       });
     });

     // Card hover effects
     document.querySelectorAll('.card').forEach(card => {
       card.addEventListener('mouseenter', function() {
         this.style.transform = 'scale(1.05) translateY(-10px)';
       });
       
       card.addEventListener('mouseleave', function() {
         this.style.transform = 'scale(1) translateY(0)';
       });
     });

     // Crewmate card animations
     document.querySelectorAll('.crewmate-card').forEach(card => {
       card.addEventListener('mouseenter', function() {
         this.style.transform = 'translateY(-15px) rotateY(5deg)';
         this.style.boxShadow = '0 25px 50px rgba(255, 107, 107, 0.4)';
       });
       
       card.addEventListener('mouseleave', function() {
         this.style.transform = 'translateY(0) rotateY(0deg)';
         this.style.boxShadow = 'none';
       });
    });

     // Emergency button function
     function triggerEmergency() {
       // Create sabotage alert
       const sabotageAlert = document.createElement('div');
       sabotageAlert.className = 'sabotage-alert';
       sabotageAlert.innerHTML = '<div class="sabotage-text">EMERGENCY MEETING!</div>';
       document.body.appendChild(sabotageAlert);
       
       // Remove alert after 3 seconds
       setTimeout(() => {
         sabotageAlert.remove();
       }, 3000);
       
       // Add screen shake
       document.body.classList.add('screen-shake');
       setTimeout(() => {
         document.body.classList.remove('screen-shake');
       }, 500);
     }
  </script>
</body>
</html>